{"version":3,"file":"lieu.umd.min.js","sources":["../src/core/helpers.js","../src/core/const.js","../src/lieu.js"],"sourcesContent":["class Helpers {\n    // Checks if passed object is object or not\n    static isObject(obj) {\n        return typeof obj === 'object';\n    }\n\n    // Checks if passed object is funcion or not\n    static isFunction(func) {\n        return typeof func === 'function';\n    }\n\n    // Returns parsed from JSON object or null\n    static fromJson(obj) {\n        try {\n            const languagesFromJson = JSON.parse(obj);\n\n            if (this.isObject(languagesFromJson)) {\n                return languagesFromJson;\n            } else {\n                return null;\n            }\n        } catch {\n            return null;\n        }\n    }\n\n    // Return browser language\n    static getBrowserLang() {\n        return navigator.language.slice(0, 2);\n    }\n\n    // Check key existing in object\n    static hasKey(key, obj) {\n        return Object.keys(obj).indexOf(key) !== -1;\n    }\n\n    // Split string by delimiter, returns array<String>\n    static findAllSubstrings(string) {\n        const regexp = /\\|[[{\\d+]/g;\n        const subStrings = [];\n\n        function findDelimiter(str) {\n            const delimiterIndex = str.search(regexp);\n\n            if (delimiterIndex !== -1) {\n                subStrings.push(str.substring(0, delimiterIndex));\n                findDelimiter(str.substring(delimiterIndex + 1));\n            } else {\n                subStrings.push(str);\n            }\n        }\n\n        findDelimiter(string);\n\n        return subStrings;\n    }\n\n    /**\n     * Returns pluralized string depending on passed @param count\n     * @param string<String>\n     * @param count<Number>\n     */\n    static pluralizeString(string, count) {\n        // [num,num] {num,num} [num] {num} [num,*] {num,*}\n        const regex = /[[{]\\d+,{0,1}\\d{0,}\\*{0,1}[\\]}]/g;\n        const subStrings = this.findAllSubstrings(string);\n\n        let locale;\n\n        for (let i = 0; i < subStrings.length; i++) {\n            const subString = subStrings[i];\n            const result = subString.match(regex);\n\n            if (result) {\n                // Set default value for the first time\n                if (!locale) {\n                    locale = subString.replace(regex, '');\n                    continue;\n                }\n\n                const resultNumbers = [];\n\n                // Remove array/obj brackets and split string by comma\n                resultNumbers.push(\n                    ...result[0].replace(/[[{]|[\\]}]/g, '').split(',')\n                );\n\n                // Check if matched plural count more or equal passed count\n                if (resultNumbers.length >= 2) {\n                    if (resultNumbers[1] === '*' && count >= resultNumbers[0]) {\n                        locale = subString.replace(regex, '');\n\n                        break;\n                    } else if (\n                        resultNumbers[0] <= count &&\n                        resultNumbers[1] >= count\n                    ) {\n                        locale = subString.replace(regex, '');\n\n                        break;\n                    }\n                } else {\n                    if (resultNumbers[0] === count) {\n                        locale = subString.replace(regex, '');\n\n                        break;\n                    }\n                }\n            }\n        }\n\n        return locale;\n    }\n}\n\nexport default Helpers;\n","const STORAGE_KEY = 'lieu';\nconst ATTRIBUTE_NAME = 'data-lieu';\nconst PLURAL = 'plural';\n\nexport { STORAGE_KEY, ATTRIBUTE_NAME, PLURAL };\n","import Helpers from './core/helpers';\nimport { STORAGE_KEY, ATTRIBUTE_NAME, PLURAL } from './core/const';\n\n/**\n * @param initialData<Object>\n */\nexport default class Lieu {\n    #isDebug = false; // boolean\n    #initialData = null; // object\n    #languages = null; // object\n    #currentLanguage = null; // object\n    #attributeName; // string\n\n    #onSetLang = (newLang, oldLang) => {};\n    #onGetLang = () => {};\n\n    constructor(initialData) {\n        this.#initialData = initialData;\n\n        this.#isDebug = initialData.isDebug;\n\n        this.#init();\n    }\n\n    #init() {\n        this.#initLanguages();\n        this.#setAttributeName();\n        this.#setInitialLanguage();\n        this.#setHooks();\n    }\n\n    // Set class field languages if languages from initial data is object or json\n    #initLanguages() {\n        let initialLanguages = this.#initialData.languages;\n\n        if (!Helpers.isObject(initialLanguages)) {\n            initialLanguages = Helpers.fromJson(initialLanguages);\n        }\n\n        this.#languages = initialLanguages;\n    }\n\n    // Set hooks if they exist in initial data\n    #setHooks() {\n        if (Helpers.isFunction(this.#initialData.onSetLang)) {\n            this.#onSetLang = this.#initialData.onSetLang;\n        }\n\n        if (Helpers.isFunction(this.#initialData.onGetLang)) {\n            this.#onGetLang = this.#initialData.onGetLang;\n        }\n    }\n\n    // Set custom data attribute\n    #setAttributeName() {\n        this.#attributeName = this.#initialData.attributeName ?? ATTRIBUTE_NAME;\n    }\n\n    // Set initial language from languages\n    #setInitialLanguage() {\n        const userKeyLang =\n            localStorage.getItem(STORAGE_KEY) ?? // from storage\n            this.#initialData.initialLanguage ?? // from options\n            Helpers.getBrowserLang(); // from navigator\n\n        if (Helpers.hasKey(userKeyLang, this.#languages)) {\n            this.setLang(userKeyLang);\n        } else {\n            this.setLang(Object.keys(this.#languages)[0]);\n        }\n    }\n\n    /*\n     * Set new lang by string key from languages class field\n     * @param langKey<String>\n     */\n    setLang(langKey) {\n        const newLanguage = this.#languages[langKey];\n        const oldLanguage = this.#currentLanguage;\n\n        if (!Helpers.hasKey(langKey, this.#languages)) {\n            console.error(\n                `Lieu | Language key \"${langKey}\" not found in languages!`\n            );\n\n            return;\n        }\n\n        this.#currentLanguage = newLanguage;\n        localStorage.setItem(STORAGE_KEY, langKey);\n\n        this.#localizeDomElems();\n\n        this.#onSetLang(oldLanguage, newLanguage);\n    }\n\n    // Find all data-attributes by attributeName field in DOM, and localize them\n    #localizeDomElems() {\n        const $locales = Array.from(\n            document.querySelectorAll(`[${this.#attributeName}]`)\n        );\n\n        $locales.forEach(($str) => {\n            const localeAttributes = $str.getAttributeNames();\n            let localeKey;\n            let pluralNum;\n            const interpolationObj = {};\n\n            localeAttributes.forEach((attr) => {\n                // If data-lieu-... attribute (or custom)\n                if (attr.includes(this.#attributeName.toLowerCase())) {\n                    const attributeValue = $str.getAttribute(attr);\n\n                    // Set locale key, plural number and interpolation properties\n                    if (attr === this.#attributeName) {\n                        localeKey = attributeValue;\n                    } else if (\n                        attr.includes(PLURAL) &&\n                        !isNaN(attributeValue)\n                    ) {\n                        pluralNum = Number(attributeValue);\n                    } else {\n                        const objKey = attr.replace(\n                            `${this.#attributeName.toLowerCase()}-`,\n                            ''\n                        );\n\n                        interpolationObj[objKey] = attributeValue;\n                    }\n                }\n            });\n\n            $str.innerHTML = this.trans(localeKey, interpolationObj, pluralNum);\n        });\n    }\n\n    /**\n     * Return value from currentLanguage.locales or null\n     * @param localeKey<String>\n     * @param arg1<String|Object> not required\n     * @param arg2<String|Object> not required\n     */\n    trans(localeKey, arg1, arg2) {\n        const { locales } = this.#currentLanguage;\n        const options = [arg1, arg2];\n\n        let locale = locales[localeKey];\n        let interpolationObj;\n        let pluralNum;\n\n        if (Helpers.isObject(options[0])) {\n            interpolationObj = options[0];\n            pluralNum = options[1];\n        } else {\n            interpolationObj = options[1];\n            pluralNum = options[0];\n        }\n\n        if (!locale) {\n            locale = localeKey;\n\n            if (this.#isDebug) {\n                console.warn(\n                    `Lieu | Locale key \"${localeKey}\" not found in current language!`\n                );\n            }\n        }\n\n        if (interpolationObj) {\n            locale = locale.replace(\n                /%\\{(.*?)\\}/g,\n                (match, key) => interpolationObj[key] || match\n            );\n        }\n\n        if (pluralNum) {\n            locale = Helpers.pluralizeString(locale, pluralNum);\n        }\n\n        return locale;\n    }\n\n    /** Return language object from languages class field by its' key\n     * or current langauge if @param langKey is not set\n     @param langKey<String> not required\n     */\n    getLang(langKey) {\n        this.#onGetLang();\n\n        if (!langKey) {\n            return this.#currentLanguage;\n        }\n\n        if (!Helpers.hasKey(langKey, this.#languages)) {\n            console.error(\n                `Lieu | Language key \"${langKey}\" not found in languages!`\n            );\n\n            return;\n        }\n\n        return this.#languages[langKey];\n    }\n\n    // Returns object of all languages\n    getLangs() {\n        return this.#languages;\n    }\n}\n"],"names":["Helpers","static","obj","func","languagesFromJson","JSON","parse","this","isObject","navigator","language","slice","key","Object","keys","indexOf","string","regexp","subStrings","findDelimiter","str","delimiterIndex","search","push","substring","count","regex","findAllSubstrings","locale","i","length","subString","result","match","replace","resultNumbers","split","STORAGE_KEY","isDebug","initialData","languages","currentLanguage","attributeName","onSetLang","newLang","oldLang","onGetLang","constructor","init","initLanguages","setAttributeName","setInitialLanguage","setHooks","initialLanguages","fromJson","isFunction","userKeyLang","localStorage","getItem","initialLanguage","getBrowserLang","hasKey","setLang","langKey","newLanguage","oldLanguage","setItem","localizeDomElems","console","error","Array","from","document","querySelectorAll","forEach","$str","localeAttributes","getAttributeNames","localeKey","pluralNum","interpolationObj","attr","includes","toLowerCase","attributeValue","getAttribute","isNaN","Number","objKey","innerHTML","trans","arg1","arg2","locales","options","warn","pluralizeString","getLang","getLangs"],"mappings":"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"}