{"version":3,"file":"lieu.es.min.js","sources":["../src/core/Helpers.js","../src/core/index.js","../src/core/const.js"],"sourcesContent":["class Helpers {\n    // Checks if passed object is object or not\n    static isObject(obj) {\n        return typeof obj === 'object';\n    }\n\n    // Checks if passed object is funcion or not\n    static isFunction(obj) {\n        return typeof obj === 'function';\n    }\n\n    /** Returns parsed from JSON object or null\n    @param obj<JSON>\n    */\n    static fromJson(obj) {\n        try {\n            const languagesFromJson = JSON.parse(obj);\n\n            if (this.isObject(languagesFromJson)) {\n                return languagesFromJson;\n            } else {\n                return null;\n            }\n        } catch {\n            return null;\n        }\n    }\n}\n\nexport default Helpers;\n","import Helpers from './Helpers';\r\nimport { STORAGE_KEY, ATTRIBUTE_NAME } from './const';\r\n\r\n/**\r\n * @param initialData<Object>\r\n */\r\nexport default class Lieu {\r\n    #initialData = null; // object\r\n    #languages = null; // object\r\n    #currentLanguage = null; // object\r\n    #initialLanguage = null; // string\r\n    #attributeName = ATTRIBUTE_NAME; // string\r\n\r\n    #onSetLang = (newLang, oldLang) => {};\r\n    #onGetLang = () => {};\r\n\r\n    constructor(initialData) {\r\n        this.#initialData = initialData;\r\n\r\n        this.#initLieu();\r\n    }\r\n\r\n    // Class initialization\r\n    #initLieu() {\r\n        this.#initLanguages();\r\n        this.#setHooks();\r\n        this.#setAttributeName();\r\n        this.#setInitialLanguage();\r\n    }\r\n\r\n    // Set class field languages if languages from inittial data is object or json\r\n    #initLanguages() {\r\n        let initialLanguages = this.#initialData?.languages;\r\n\r\n        if (Helpers.isObject(initialLanguages)) {\r\n            this.#setLanguages(initialLanguages);\r\n        } else {\r\n            initialLanguages = Helpers.fromJson(initialLanguages); // return null if lang not in json\r\n\r\n            this.#setLanguages(initialLanguages);\r\n        }\r\n    }\r\n\r\n    // Set hooks if they exist in inital data\r\n    #setHooks() {\r\n        if (Helpers.isFunction(this.#initialData.onSetLang)) {\r\n            this.#onSetLang = this.#initialData.onSetLang;\r\n        }\r\n\r\n        if (Helpers.isFunction(this.#initialData.onGetLang)) {\r\n            this.#onGetLang = this.#initialData.onGetLang;\r\n        }\r\n    }\r\n\r\n    // Set custom data attribute\r\n    #setAttributeName() {\r\n        const attr = this.#initialData?.attributeName;\r\n\r\n        if (attr) {\r\n            this.#attributeName = attr;\r\n        }\r\n    }\r\n\r\n    /** Set languages from initial data in languages class field\r\n    @param langs<Object>\r\n    */\r\n    #setLanguages(langs) {\r\n        this.#languages = langs;\r\n    }\r\n\r\n    // Set initial language from languages\r\n    #setInitialLanguage() {\r\n        const langKeys = Object.keys(this.#languages);\r\n        const initialLangName = this.#initialData.initialLanguage;\r\n\r\n        if (initialLangName) {\r\n            for (let i = 0; i < langKeys.length; i++) {\r\n                if (initialLangName.includes(langKeys[i])) {\r\n                    this.#initialLanguage = initialLangName;\r\n\r\n                    this.setLang(initialLangName);\r\n\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            this.#setInitialLanguageAuto();\r\n        }\r\n    }\r\n\r\n    // Set initial language if initial language is not set in initial data\r\n    #setInitialLanguageAuto() {\r\n        // Todo improve\r\n        const storageLangKey = window.localStorage?.getItem(STORAGE_KEY);\r\n        const langKeys = Object.keys(this.#languages);\r\n        let langKey = langKeys[0];\r\n\r\n        if (storageLangKey) {\r\n            for (let i = 0; i < langKeys.length; i++) {\r\n                if (langKeys[i] === storageLangKey) {\r\n                    langKey = storageLangKey;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.#initialLanguage = langKey;\r\n\r\n        this.setLang(langKey);\r\n    }\r\n\r\n    /** Set new lang by string key from languages class field\r\n    @param langKey<String>\r\n    */\r\n    setLang(langKey) {\r\n        const oldLang = this.#currentLanguage;\r\n\r\n        this.#currentLanguage = this.#languages[langKey];\r\n        window.localStorage?.setItem(STORAGE_KEY, langKey);\r\n\r\n        this.#localizeDomElems();\r\n\r\n        this.#onSetLang(oldLang, this.#currentLanguage);\r\n    }\r\n\r\n    // Find all data-attributes by attributeName field in DOM, and localize them\r\n    #localizeDomElems() {\r\n        const localeElems = Array.from(\r\n            document.querySelectorAll(`[${this.#attributeName}]`)\r\n        );\r\n\r\n        const { locales } = this.#currentLanguage;\r\n\r\n        localeElems.forEach((elem) => {\r\n            const locale = elem.getAttribute(this.#attributeName);\r\n\r\n            const localeText = locales[locale];\r\n\r\n            elem.innerHTML = localeText;\r\n        });\r\n    }\r\n\r\n    /** Return value from currentLanguage.locales or null\r\n    @param localeKey<String>\r\n    */\r\n    localize(localeKey) {\r\n        const { locales } = this.#currentLanguage;\r\n\r\n        return locales[localeKey];\r\n    }\r\n\r\n    /** Return value from currentLanguage.locales or null\r\n    @param localeKey<String>\r\n    */\r\n    __(localeKey) {\r\n        return this.localize(localeKey);\r\n    }\r\n\r\n    // Return browser language\r\n    getBrowserLang() {\r\n        return navigator?.language;\r\n    }\r\n\r\n    /** Return language object from languages class field by its' key\r\n    * or current langauge if @param langKey is not set\r\n    @param langKey<String> not required\r\n    */\r\n    getLang(langKey) {\r\n        this.#onGetLang();\r\n\r\n        if (langKey) {\r\n            return this.#languages[langKey];\r\n        }\r\n\r\n        return this.#currentLanguage;\r\n    }\r\n\r\n    // Returns object of all languages\r\n    getLangs() {\r\n        return this.#languages;\r\n    }\r\n\r\n    // Returns string of initial language\r\n    getInitialLang() {\r\n        return this.#initialLanguage;\r\n    }\r\n}\r\n","const STORAGE_KEY = 'lieu';\nconst ATTRIBUTE_NAME = 'data-lieu';\n\nexport { STORAGE_KEY, ATTRIBUTE_NAME };\n"],"names":["Helpers","static","obj","languagesFromJson","JSON","parse","this","isObject","Lieu","initialData","languages","currentLanguage","initialLanguage","attributeName","onSetLang","newLang","oldLang","onGetLang","constructor","initLieu","initLanguages","setHooks","setAttributeName","setInitialLanguage","initialLanguages","fromJson","setLanguages","isFunction","attr","langs","langKeys","Object","keys","initialLangName","i","length","includes","setLang","setInitialLanguageAuto","storageLangKey","window","localStorage","getItem","langKey","setItem","localizeDomElems","localeElems","Array","from","document","querySelectorAll","locales","forEach","elem","locale","getAttribute","localeText","innerHTML","localize","localeKey","__","getBrowserLang","navigator","language","getLang","getLangs","getInitialLang"],"mappings":";;;;;AAAA,MAAMA,EAEaC,gBAACC,GACZ,MAAsB,iBAARA,CAHR,CAOOD,kBAACC,GACd,MAAsB,mBAARA,CACjB,CAKcD,gBAACC,GACZ,IACI,MAAMC,EAAoBC,KAAKC,MAAMH,GAErC,OAAII,KAAKC,SAASJ,GACPA,EAEA,IAId,CAFC,MACE,OAAO,IACV,CACJ,ECpBU,MAAMK,EACjBC,GAAe,KACfC,GAAa,KACbC,GAAmB,KACnBC,GAAmB,KACnBC,GCVmB,YDYnBC,GAAa,CAACC,EAASC,KAAV,EACbC,GAAa,OAEbC,YAAYT,GACRH,MAAKG,EAAeA,EAEpBH,MAAKa,GAba,CAiBtBA,KACIb,MAAKc,IACLd,MAAKe,IACLf,MAAKgB,IACLhB,MAAKiB,GArBa,CAyBtBH,KACI,IAAII,EAAmBlB,MAAKG,GAAcC,UAEtCV,EAAQO,SAASiB,KAGjBA,EAAmBxB,EAAQyB,SAASD,IAFpClB,MAAKoB,EAAcF,EA7BL,CAsCtBH,KACQrB,EAAQ2B,WAAWrB,MAAKG,EAAaK,aACrCR,MAAKQ,EAAaR,MAAKG,EAAaK,WAGpCd,EAAQ2B,WAAWrB,MAAKG,EAAaQ,aACrCX,MAAKW,EAAaX,MAAKG,EAAaQ,UA5CtB,CAiDtBK,KACI,MAAMM,EAAOtB,MAAKG,GAAcI,cAE5Be,IACAtB,MAAKO,EAAiBe,EAE7B,CAKDF,GAAcG,GACVvB,MAAKI,EAAamB,CA7DA,CAiEtBN,KACI,MAAMO,EAAWC,OAAOC,KAAK1B,MAAKI,GAC5BuB,EAAkB3B,MAAKG,EAAaG,gBAE1C,GAAIqB,GACA,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAASK,OAAQD,IACjC,GAAID,EAAgBG,SAASN,EAASI,IAAK,CACvC5B,MAAKM,EAAmBqB,EAExB3B,KAAK+B,QAAQJ,GAEb,KACH,OAGL3B,MAAKgC,GAhFS,CAqFtBA,KAEI,MAAMC,EAAiBC,OAAOC,cAAcC,QC7FhC,QD8FNZ,EAAWC,OAAOC,KAAK1B,MAAKI,GAClC,IAAIiC,EAAUb,EAAS,GAEvB,GAAIS,EACA,IAAK,IAAIL,EAAI,EAAGA,EAAIJ,EAASK,OAAQD,IACjC,GAAIJ,EAASI,KAAOK,EAAgB,CAChCI,EAAUJ,EACV,KACH,CAITjC,MAAKM,EAAmB+B,EAExBrC,KAAK+B,QAAQM,EAChB,CAKDN,QAAQM,GACJ,MAAM3B,EAAUV,MAAKK,EAErBL,MAAKK,EAAmBL,MAAKI,EAAWiC,GACxCH,OAAOC,cAAcG,QCtHT,ODsH8BD,GAE1CrC,MAAKuC,IAELvC,MAAKQ,EAAWE,EAASV,MAAKK,EApHZ,CAwHtBkC,KACI,MAAMC,EAAcC,MAAMC,KACtBC,SAASC,iBAAkB,IAAG5C,MAAKO,QAGjCsC,QAAEA,GAAY7C,MAAKK,EAEzBmC,EAAYM,SAASC,IACjB,MAAMC,EAASD,EAAKE,aAAajD,MAAKO,GAEhC2C,EAAaL,EAAQG,GAE3BD,EAAKI,UAAYD,CAAjB,GAEP,CAKDE,SAASC,GACL,MAAMR,QAAEA,GAAY7C,MAAKK,EAEzB,OAAOwC,EAAQQ,EAClB,CAKDC,GAAGD,GACC,OAAOrD,KAAKoD,SAASC,EArJH,CAyJtBE,iBACI,OAAOC,WAAWC,QACrB,CAMDC,QAAQrB,GAGJ,OAFArC,MAAKW,IAED0B,EACOrC,MAAKI,EAAWiC,GAGpBrC,MAAKK,CAxKM,CA4KtBsD,WACI,OAAO3D,MAAKI,CA7KM,CAiLtBwD,iBACI,OAAO5D,MAAKM,CACf"}