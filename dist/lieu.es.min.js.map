{"version":3,"file":"lieu.es.min.js","sources":["../src/core/Helpers.js","../src/core/index.js","../src/core/const.js"],"sourcesContent":["class Helpers {\n    // Checks if passed object is object or not\n    static isObject(obj) {\n        return typeof obj === 'object';\n    }\n\n    // Checks if passed object is funcion or not\n    static isFunction(obj) {\n        return typeof obj === 'function';\n    }\n\n    /** Returns parsed from JSON object or null\n    @param obj<JSON>\n    */\n    static fromJson(obj) {\n        try {\n            const languagesFromJson = JSON.parse(obj);\n\n            if (this.isObject(languagesFromJson)) {\n                return languagesFromJson;\n            } else {\n                return null;\n            }\n        } catch {\n            return null;\n        }\n    }\n}\n\nexport default Helpers;\n","import Helpers from './Helpers';\nimport { STORAGE_KEY, ATTRIBUTE_NAME } from './const';\n\n/**\n * @param initialData<Object>\n */\nexport default class Lieu {\n    #isDebug = false; // boolean\n    #isPluginInitialized = false; // boolean\n    #initialData = null; // object\n    #languages = null; // object\n    #currentLanguage = null; // object\n    #initialLanguage = null; // string\n    #attributeName = ATTRIBUTE_NAME; // string\n\n    #onSetLang = (newLang, oldLang) => {};\n    #onGetLang = () => {};\n\n    constructor(initialData) {\n        this.#initialData = initialData;\n\n        this.#isDebug = initialData.isDebug;\n\n        this.#initLieu();\n    }\n\n    // Class initialization\n    #initLieu() {\n        this.#initLanguages();\n        this.#setHooks();\n        this.#setAttributeName();\n        this.#setInitialLanguage();\n    }\n\n    // Set class field languages if languages from inittial data is object or json\n    #initLanguages() {\n        let initialLanguages = this.#initialData?.languages;\n\n        if (Helpers.isObject(initialLanguages)) {\n            this.#setLanguages(initialLanguages);\n        } else {\n            initialLanguages = Helpers.fromJson(initialLanguages); // return null if lang not in json\n\n            this.#setLanguages(initialLanguages);\n        }\n    }\n\n    // Set hooks if they exist in inital data\n    #setHooks() {\n        if (Helpers.isFunction(this.#initialData.onSetLang)) {\n            this.#onSetLang = this.#initialData.onSetLang;\n        }\n\n        if (Helpers.isFunction(this.#initialData.onGetLang)) {\n            this.#onGetLang = this.#initialData.onGetLang;\n        }\n    }\n\n    // Set custom data attribute\n    #setAttributeName() {\n        const attr = this.#initialData?.attributeName;\n\n        if (attr) {\n            this.#attributeName = attr;\n        }\n    }\n\n    /** Set languages from initial data in languages class field\n    @param langs<Object>\n    */\n    #setLanguages(langs) {\n        this.#languages = langs;\n    }\n\n    // Set initial language from languages\n    #setInitialLanguage() {\n        const storageLangKey = window.localStorage?.getItem(STORAGE_KEY);\n        const initialLangName = this.#initialData.initialLanguage;\n\n        let defaultLangKey;\n\n        // If storage lang exists in languages object set as default\n        if (storageLangKey) {\n            const isExistsInLangs = this.#isKeyExistsInLangs(storageLangKey);\n\n            // If it exists in languages set as initial\n            if (isExistsInLangs) {\n                defaultLangKey = this.#languages[storageLangKey];\n            }\n        }\n\n        // If storageLangKey not used and browser language exists in languages object sets it as default\n        if (!defaultLangKey) {\n            const browserLang = this.getBrowserLang().slice(0, 2);\n\n            if (browserLang) {\n                const isExistsInLangs = this.#isKeyExistsInLangs(browserLang);\n\n                if (isExistsInLangs) {\n                    defaultLangKey = this.#languages[browserLang];\n                }\n            }\n        }\n\n        // If storageLangKey and browser lang not used, set initialLangName as default\n        if (initialLangName && !defaultLangKey) {\n            const isExistsInLangs = this.#isKeyExistsInLangs(initialLangName);\n\n            // If it exists in languages set as initial\n            if (isExistsInLangs) {\n                defaultLangKey = initialLangName;\n            }\n        } else {\n            // If storageLangKey, browser lang and initialLangName not used, set first language key as default\n            defaultLangKey = Object.keys(this.#languages)[0];\n        }\n\n        this.#initialLanguage = defaultLangKey;\n\n        this.setLang(defaultLangKey);\n    }\n\n    /** Checks is key exists in language object\n    @param langKey<String>\n    returns true if key exists\n    */\n    #isKeyExistsInLangs(langKey) {\n        const langKeys = Object.keys(this.#languages);\n\n        return langKeys.find((key) => key === langKey);\n    }\n\n    /** Set new lang by string key from languages class field\n    @param langKey<String>\n    */\n    setLang(langKey) {\n        const newLanguage = this.#languages[langKey];\n        const oldLanguage = this.#currentLanguage;\n\n        if (!newLanguage) {\n            if (this.#isDebug) {\n                console.error(\n                    `Lieu | Language key \"${langKey}\" not found in languages!`\n                );\n            }\n\n            return;\n        }\n\n        this.#currentLanguage = newLanguage;\n        window.localStorage?.setItem(STORAGE_KEY, langKey);\n\n        this.#localizeDomElems();\n\n        if (this.#isPluginInitialized) {\n            this.#onSetLang(oldLanguage, newLanguage);\n        } else {\n            this.#isPluginInitialized = true;\n        }\n    }\n\n    // Find all data-attributes by attributeName field in DOM, and localize them\n    #localizeDomElems() {\n        const localeElems = Array.from(\n            document.querySelectorAll(`[${this.#attributeName}]`)\n        );\n\n        const { locales } = this.#currentLanguage;\n\n        localeElems.forEach((elem) => {\n            const locale = elem.getAttribute(this.#attributeName);\n\n            let localeText = locales[locale];\n\n            // If not found set attr value as text\n            if (!localeText) {\n                localeText = locale;\n\n                if (this.#isDebug) {\n                    console.warn(\n                        `Lieu | ${\n                            this.#attributeName\n                        } attribute value \"${locale}\" not found in current language!`\n                    );\n                }\n            }\n\n            elem.innerHTML = localeText;\n        });\n    }\n\n    /** Return value from currentLanguage.locales or null\n    @param localeKey<String>\n    */\n    localize(localeKey) {\n        const { locales } = this.#currentLanguage;\n        let locale = locales[localeKey];\n\n        if (!locale) {\n            locale = localeKey;\n\n            if (this.#isDebug) {\n                console.error(\n                    `Lieu | Locale key \"${localeKey}\" not found in current language!`\n                );\n            }\n        }\n\n        return locale;\n    }\n\n    /** Return value from currentLanguage.locales or null\n    @param localeKey<String>\n    */\n    __(localeKey) {\n        return this.localize(localeKey);\n    }\n\n    // Return browser language\n    getBrowserLang() {\n        return navigator?.language;\n    }\n\n    /** Return language object from languages class field by its' key\n    * or current langauge if @param langKey is not set\n    @param langKey<String> not required\n    */\n    getLang(langKey) {\n        this.#onGetLang();\n\n        if (langKey) {\n            return this.#languages[langKey];\n        }\n\n        return this.#currentLanguage;\n    }\n\n    // Returns object of all languages\n    getLangs() {\n        return this.#languages;\n    }\n\n    // Returns string of initial language\n    getInitialLang() {\n        return this.#initialLanguage;\n    }\n}\n","const STORAGE_KEY = 'lieu';\nconst ATTRIBUTE_NAME = 'data-lieu';\n\nexport { STORAGE_KEY, ATTRIBUTE_NAME };\n"],"names":["Helpers","static","obj","languagesFromJson","JSON","parse","this","isObject","Lieu","isDebug","isPluginInitialized","initialData","languages","currentLanguage","initialLanguage","attributeName","onSetLang","newLang","oldLang","onGetLang","constructor","initLieu","initLanguages","setHooks","setAttributeName","setInitialLanguage","initialLanguages","fromJson","setLanguages","isFunction","attr","langs","storageLangKey","window","localStorage","getItem","initialLangName","defaultLangKey","isKeyExistsInLangs","browserLang","getBrowserLang","slice","Object","keys","setLang","langKey","find","key","newLanguage","oldLanguage","setItem","localizeDomElems","console","error","localeElems","Array","from","document","querySelectorAll","locales","forEach","elem","locale","getAttribute","localeText","warn","innerHTML","localize","localeKey","__","navigator","language","getLang","getLangs","getInitialLang"],"mappings":"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"}